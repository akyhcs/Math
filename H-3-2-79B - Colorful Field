//package com.prac.math;
///////////////////////////////////////////////////////////////////////////failing with heap memory//////////////////////////////////////////////////////////////////////////////////////////
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ColorfulField {

	public static void main(String[] args) throws IOException {
		Input input = new Input(); 
		String firstLineInput[] = null;
		String fruit[] = {"Carrots","Kiwis","Grapes"};
		try(InputStreamReader inputStreamReader = new InputStreamReader(System.in))
		{
			try(BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {
				firstLineInput = bufferedReader.readLine().trim().split(" ");
				input.setRow(Integer.parseInt(firstLineInput[0]));
				input.setCol(Integer.parseInt(firstLineInput[1]));
				input.setTotalWasteLand(Integer.parseInt(firstLineInput[2]));
				input.setTotalTestCase(Integer.parseInt(firstLineInput[3]));
				input.setMatrix(new int[input.getRow()][input.getCol()]);
				
				//init waste land
				int wasteLand = input.getTotalWasteLand(); 
				while(wasteLand-- > 0)
				{
					String currRoCloforWasteLan[] = bufferedReader.readLine().trim().split(" ");
					input.setDataInMatrix(Integer.parseInt(currRoCloforWasteLan[0])-1,
							Integer.parseInt(currRoCloforWasteLan[1])-1, -9);
				}
				processMatrix(input);
				int totalInput = input.getTotalTestCase();
				while (totalInput-- > 0) {
					String currRoClo[] = bufferedReader.readLine().trim().split(" ");
					int index = input.getDataInMatrix(Integer.parseInt(currRoClo[0])-1,Integer.parseInt(currRoClo[1])-1);
					if(index==-9)
					{
						System.out.println("Waste");
					}
					else
					{
						System.out.println(fruit[index]);
					}
				}
			}///buffer
		}//inputstream
		
		
		
		
		
	}

	private static void processMatrix(Input input) {
		int matrix[][] = input.getMatrix();
		int k = -1;
		for(int i = 0 ;i<input.getRow();i++)
		{
			for(int j = 0 ;j<input.getCol();j++)
			{
				if(matrix[i][j]==-9) continue;
				else
				{
					//putting index of correct fruit from fruit arr doing modulo by 3 because 3 is size of fruit arr .
					int l = ((++k) % 3);
					input.setDataInMatrix(i, j,l);
				}
			}
		}
	}

}

class Input
{
	private int row;
	private int col;
	private int totalWasteLand;
	private int totalTestCase;
	private int matrix[][];
	public int getRow() {
		return row;
	}
	public void setRow(int row) {
		this.row = row;
	}
	public int getCol() {
		return col;
	}
	public void setCol(int col) {
		this.col = col;
	}
	public int getTotalWasteLand() {
		return totalWasteLand;
	}
	public void setTotalWasteLand(int totalWasteLand) {
		this.totalWasteLand = totalWasteLand;
	}

	public int getTotalTestCase() {
		return totalTestCase;
	}
	public void setTotalTestCase(int totalTestCase) {
		this.totalTestCase = totalTestCase;
	}
	public int[][] getMatrix() {
		return matrix;
	}
	public void setMatrix(int[][] matrix) {
		this.matrix = matrix;
	}
	
	public void setDataInMatrix(int row,int col,int data)
	{
		this.matrix[row][col] = data;
	}
	public int getDataInMatrix(int row,int col)
	{
		return this.matrix[row][col];
	}
}

///////////////////////////////////////////////////////////////////////////end//////////////////////////////////////////////////////////////////////////////////////////
package com.prac.math;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Hashtable;
 
 
public class ColorfulField {
 
	public static void main(String[] args) throws IOException {
		
		String firstLineInput[] = null;
		String fruit[] = {"Carrots","Kiwis","Grapes"};
		int prefixSumWasteLand[] = null; 
		Hashtable<Integer, ArrayList<Integer>> hashtable = new Hashtable<>();
		try(InputStreamReader inputStreamReader = new InputStreamReader(System.in))
		{
			try(BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {
				firstLineInput = bufferedReader.readLine().trim().split(" ");
				int row = Integer.parseInt(firstLineInput[0]);
				int col = Integer.parseInt(firstLineInput[1]);
				int totalWasteLand = Integer.parseInt(firstLineInput[2]);
				int totalTestCase = Integer.parseInt(firstLineInput[3]);
				prefixSumWasteLand = new int[row+1];
				
				//init waste land
				int wasteLand = totalWasteLand; 
				while(wasteLand-- > 0)
				{
					String currRoCloforWasteLan[] = bufferedReader.readLine().trim().split(" ");
					int wasteLandRow  = Integer.parseInt(currRoCloforWasteLan[0]) ;
					int wasteLandColumn  = Integer.parseInt(currRoCloforWasteLan[1]);
					ArrayList<Integer> list = null;
					if(hashtable.containsKey(wasteLandRow))
					{
						list = hashtable.get(wasteLandRow);
						
					}
					else
					{
						 list = new ArrayList<>();
							
					}

					list.add(wasteLandColumn);
					hashtable.put(wasteLandRow, list);
				}
			//	System.out.println(hashtable);
				preparePrefixSum(hashtable,prefixSumWasteLand);
				int totalInput = totalTestCase;
				while (totalInput-- > 0) {
					String currRoClo[] = bufferedReader.readLine().trim().split(" ");
					int queryRow = Integer.parseInt(currRoClo[0]);
					int queryCol = Integer.parseInt(currRoClo[1]);
					if(currentQeryisWasteLand(queryCol,hashtable.get(queryRow)))
					{
						System.out.println("Waste");
					}
					else
					{
						int totalLandVisited = (queryRow-1)*col + queryCol;//add querycol for current col
						int indexOfFruit = (totalLandVisited%fruit.length) -1 ;//without introduction of wasteland
						///introduce wasteland x,y
						//int x = getCountofWasteLandBeforeCurrentRow(queryRow,hashtable);
						int x = getCountofWasteLandBeforeCurrentRow(prefixSumWasteLand,queryRow-1);
						int y = getCountOfWastelandinCurrentRow(queryCol, hashtable.get(queryRow));
						indexOfFruit = indexOfFruit - (x + y);
						//
						if(indexOfFruit<0)
						{
							indexOfFruit = indexOfFruit%(-1*fruit.length);
							if(indexOfFruit<0)
								indexOfFruit = indexOfFruit+fruit.length;
						}
						
							System.out.println(fruit[indexOfFruit]);
						
						
					}
					
				}
			}///buffer
		}//inputstream
			hashtable.clear();	
	}
 
	private static int getCountofWasteLandBeforeCurrentRow(int[] prefixSumWasteLand, int row) {
		
		return prefixSumWasteLand[row];
	}

	private static void preparePrefixSum(Hashtable<Integer, ArrayList<Integer>> hashtable, int[] prefixSumWasteLand) {
		for(int i = 1;i<prefixSumWasteLand.length;i++)
		{

			prefixSumWasteLand[i] = hashtable.get(i)!=null?prefixSumWasteLand[i-1] + hashtable.get(i).size():prefixSumWasteLand[i-1];
		}
		
	}

	private static int getCountOfWastelandinCurrentRow(int queryCol, ArrayList<Integer> arrayList) {
		int count = 0;
		if(arrayList==null)
		{ 	return 0;}
		for(int i =0 ;i<arrayList.size();i++)
		{
			//System.out.println(arrayList.get(i)+"------------"+queryCol);
			if(arrayList.get(i)<queryCol)
			{
				//System.out.println(arrayList.get(i)+"******"+queryCol);
				count++;
			}
		}
		//System.out.println("count of wasteland in current ROW : "+count);
		return count;
		
	}
 
	private static int getCountofWasteLandBeforeCurrentRow(int queryRow,
			Hashtable<Integer, ArrayList<Integer>> hashtable) {
		int count=0;
		//collect frequency of 
		for(int i =1 ;i<queryRow;i++)
		{
			if(hashtable.containsKey(i))
				count+=hashtable.get(i).size();
		}
		return count;
	}
 
	private static boolean currentQeryisWasteLand(int queryCol, ArrayList<Integer> arrayList) {
		if(arrayList==null)
			return false;
		else
		{
			for(int i =0 ;i<arrayList.size();i++)
			{
				if(arrayList.get(i)==queryCol)
					return true;
			}
			
		}
		return false;
	}
 
}



