//https://codeforces.com/problemset/problem/235/A
package com.prac.math;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class LCMChallenge {

	public static void main(String[] args) throws IOException {
		InputStreamReader inputStreamReader = new InputStreamReader(System.in);
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		long n = Long.parseLong(bufferedReader.readLine().trim());
		long maximumLCM = 0l;
		if(n<=2)
		{
			System.out.println(n);
		}else {
			maximumLCM = getMaximuimLCM(n);
			System.out.println(maximumLCM);
		}
		bufferedReader.close();
		inputStreamReader.close();

	}

	private static long getMaximuimLCM(long n) {
		
		if(n%2l==0)
		{
			//no common factor to maximize lcm
			//n,n-1,n-2
			if(gcd(n,n-3)==1)//n=30,n-3=27 then gcd cannot be one   
			{
				return lcm(lcm(n,n-1),n-3);
			}
			else
			{
				return lcm(lcm(n-1,n-2),n-3);
			}
			
		}
		else
		{
			return lcm(lcm(n,n-1),n-2);
		}
	}

	private static long lcm(long n, long l) {
		long lcm = n*l/gcd(n,l); 
		return lcm;
	}

	private static long gcd(long n, long l) {
		if(n==0||l==0)
			return n==0?n:l;
		long c = 0;
		while((c=n%l)!=0)
		{
			n = l;
			l=c;
		}
		return l;
	}

	

}
