/*
https://www.hackerrank.com/contests/first-assessment/challenges/the-hardest-problem-ever#:~:text=A%20subsequence%20is%20a%20sequence,C%2CE%2CF%7D.

A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the 
remaining elements. For example, the sequence 
[A,B,D] is a subsequence of [A,B,C,D,E,F] obtained after removal of elements [C,E,F]
. The relation of one sequence being the subsequence of another is a preorder.
There is an array A consisting of N integers. Tourist challenges Petr to solve a problem for all possible non-empty
  subsequences of this array. As we all know that an array of size N can have (2^N−1)
 number of non empty subsequences. Tourist thought that it would be difficult for him to check Petr output for all possible subsequences
so he designed a technique to check Petr output. Tourist asked Petr to give him just the value of 
bitwise OR of all the answers obtained after solving each subsequence.

  There is a function Divisors
 which is defined as below:
Divisors(long long int subsequence[])
{
    int count[];//array initialised to 0.
    for(i=0;i<subsequence.length;i++)
    {
        number=subsequence[i];
        for(j=2;j<=number;j++)
        {
            if(number%j==0)
            {
                count[j]++;
                if(count[j]==subsequence.length)
                    return 0;
            }
        }
    }
    return 1;
}

All the (2^N−1)
 subsequences are passed in the function 
solve:
solve(long long int subsequence[])
{
    return Divisors(subsequence);
}

Petr asks for your help to compute the 
bitwise OR of all the answers generated from every subsequence.
Input Format

First line contains T testcases.

Then T lines follow each containing a value N (size of array).

Then N integers containing the array elements.
  Constraints

1≤T≤10000
1 ≤N≤100
1≤A[i]≤10^9
  Output Format

Print 
T
 lines containing the answer

Sample Input 0

1
2
2 3

Sample Output 0
1
Explanation 
Divisors(2)=0
Divisors(3)=0
Divisors(2,3)=1
0 OR 0 OR 1 = 1
  */

/* package codechef; // don't place package name! */
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
public class Main
{
   private final static Scanner sc = new Scanner(System.in);
    public static void main (String[] args) throws java.lang.Exception
    {
		
        int t = sc.nextInt();
		while(t>=1)
		{
			int n = sc.nextInt();
			long arr[] = new long[n];
			arr = init(arr);
			long finalGCD = gcdOfNElement(arr);
			if(finalGCD==1)
			{
				System.out.println(1);
			}
			else
			{
				System.out.println(0);
			}
			t--;
		}
    }

	private static long gcdOfNElement(long[] arr) {
		long intermediatedGCD = gcd(arr[0],arr[1]);
		if(intermediatedGCD==1)
			return 1;
		for(int  i = 2;i<arr.length;i++)
		{
			intermediatedGCD = gcd(arr[i], intermediatedGCD);
			if(intermediatedGCD==1)
				return 1;
			else if(intermediatedGCD==0)
				return 0;
		}
		return intermediatedGCD;
	}

	private static long gcd(long l, long m) {
		if(l==m)
			return l;
		else if(l==0||m==0)
			return l!=0?l:m;
		long max = l>m?l:m;
		long min = l<m?l:m;
		while(max%min!=0)
		{
			long temp = max;
			max = min;
			min = temp%min;
		}
		return min;
	}

	private static long[] init(long[] arr) {
		for(int i = 0 ;i<arr.length;i++)
		{
			arr[i] = sc.nextLong();
		}
		return arr;
	}
}
