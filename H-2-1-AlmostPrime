/*
A number is called 
Happy Prime if there are exactly 2 distinct prime divisors of it. Find the number of 
Happy Prime numbers between 1 and N, both inclusive.

Input Format

The first line of the input contains a single integer T denoting the number of test cases.
Each test case contains a single integer 
N
.
Constraints

1≤T≤10^6
1≤N≤10^6
Output Format
For each test case, output the number of Happy Prime numbers between 
1 and N
 on a separate line.
Sample Input

2
1
10
Sample Output
0
2
Explanation
For testcase 
1, there are no numbers between 
1 to 1 which contain exactly 2 distinct prime divisors.
For testcase 
2, there are 2 numbers 6 and 10 between 
1 to 10 which contain exactly 2 distinct prime divisors.
*/


/* package codechef; // don't place package name! */
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	private static final Scanner SCANNER = new Scanner(System.in);
	private static final int SIZE = (int)(Math.pow(10, 6) + 1);
	private static boolean   isPrime[] = new boolean[SIZE];
	private static int spf[] = new int[SIZE];
    private static int happPrimeCount[] = new int[SIZE];
	public static void main (String[] args) throws java.lang.Exception
    {
        
        initSPFandPrime();
        initHappPrimeCount();
        int totalTestCases = SCANNER.nextInt();
        while (totalTestCases>=1) {
        	int testCaseNum = SCANNER.nextInt();
        	System.out.println(happPrimeCount[testCaseNum]);
			totalTestCases = totalTestCases-1;
		}
    }
	private static void initHappPrimeCount()
	{
	
		for(int i = 2;i<happPrimeCount.length;i++)
		{
            if(isPrime[i])
            {
                happPrimeCount[i] = happPrimeCount[i-1];
            }
			if(isHappPrimeNum(i))
			{
				happPrimeCount[i] = 1 + happPrimeCount[i-1];
			}
			else
			{
				happPrimeCount[i] = happPrimeCount[i-1];
			}
		}
		
	}
	private static boolean isHappPrimeNum(int i) {
		Map<Integer, Integer> map = getDivisor(i);
		if(map!=null&&map.size()==2) { map.clear(); return true;}
		return false;
	}
	private static Map<Integer, Integer> getDivisor(int num) {
		
		Map<Integer, Integer> map = new HashMap<Integer,Integer>();
		int counter = 0;
		while (num>1)
		{

			if(map.containsKey(spf[num]))
			{
				map.put(spf[num], map.get(spf[num]+1));
			}
			else
			{
				map.put(spf[num], 1);
				counter = counter+1;
				if(counter>2)
				{
					 map.clear();
					return null;
				}
			}
			num = num/spf[num];
		}
		return map;
	}
	private static void initSPFandPrime()
	{	
		for(int i = 2;i<isPrime.length;i++)
		{
			isPrime[i] = true;
		}
		for(int  i = 2 ;i<spf.length;i++)
		{
			spf[i] = i;
		}
		for (int i = 2; i*i < isPrime.length; i++)
		{	
			if(isPrime[i])
			{
				for(int j=i;j*i<spf.length;j++)
				{
					if(spf[j*i]==i*j)
					{
						spf[j*i] = i;
						isPrime[j*i] = false;
					}
					
				}
			}
		}
	}
}
